name: frontend-cd

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "starter/frontend/**"

env:
  WORKING_DIRECTORY: 'starter/frontend'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: frontend
  REACT_APP_MOVIE_API_URL: abfe2cbbc85f74086b566dfeee64f79e-1860320616.us-east-1.elb.amazonaws.com

defaults:
  run:
    working-directory: 'starter/frontend'

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './starter/frontend/package-lock.json'
    - run: npm ci
    - run: npm run lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './starter/frontend/package-lock.json'
    - run: npm ci
    - run: npm run test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: prepare before building
      run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Configure EKS
      run: |
        aws eks update-kubeconfig --name cluster
    
    - name: Deploy EKS
      run: |
        cd k8s
        kustomize edit set image image-name=$IMAGE_URI
        kustomize build | kubectl apply -f -
