name: backend-cd

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: backend
  WORKING_DIRECTORY: 'starter/backend'

permissions:
  contents: read

defaults:
  run:
    working-directory: 'starter/backend'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install pipenv
      run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
    - name: Install dependencies
      run: pipenv install --dev
    - name: lint
      run: pipenv run lint
    
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install pipenv
      run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
    - name: Install dependencies
      run: pipenv install --dev
    - name: test
      run: pipenv run test
  
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: prepare before building
      run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Configure EKS
      run: |
        aws eks update-kubeconfig --name cluster
    
    - name: Deploy EKS
      run: |
        cd k8s
        kustomize edit set image backend-image-uri=$IMAGE_URI
        kubectl apply -f

